package ex.collection2;
import java.util.*;

class MyStack extends Vector {
	public Object push(Object item) {
		addElement(item);
		return item;
	}
	public Object pop() {
		Object obj = peek(); // Stack에 저장된 마지막 요소를 읽어온다.
		//만일 Stack이 비어있으면 peek()메서드가 EmptyStackException을 발생시킨다.
		//마지막 요소를 삭제한다. 배열의 index가 0 부터 시작하므로 1을 빼준다.
		removeElementAt(size()-1);
		return obj;
	}
	public Object peek() {
		int len = size();
		
		if(len == 0)
			throw new EmptyStackException();
		// 마지막 요소를 반환한다. 배열의 index가 0부터 시작하므로 1을 빼준다.
		return elementAt(len-1);
	}
	public boolean empty() {
		return size() == 0;
	}
	public int search(Object o) {
		int i = lastIndexOf(o);  //끝에서부터 객체를 찾는다.
		//반환값은 저장된 위치 (배열의 index)다.
		if(i >= 0) {
			return size() - i; // Stack은 맨 위에 저장된 객체의 index를 1로 정의하기 때문
		}
		return -1;  //해당 객체를 찾지 못한다면 -1 반환
	}
}


public class StackEx1 {

	public static void main(String[] args) {
		  Stack st = new Stack();
		   st.push("0");
		   st.push("1");
		   st.push("2");
		   
		   System.out.println(st.pop());
		   System.out.println(st.peek());
		   System.out.println(st.search("0"));
	}

}
